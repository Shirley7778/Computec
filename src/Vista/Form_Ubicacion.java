package Vista;

import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import Servicio.SistemaFacade;
import Modelo.UbicacionFisica;
import java.util.List;

/**
 *
 * @author JENS07
 */
public class Form_Ubicacion extends javax.swing.JPanel {

    /**
     * Creates new form Form_Usuario
     */
    private UbicacionFisica ubicacionSeleccionada;
    private boolean modoEdicion = false;
    private final SistemaFacade sistemaFacade;
    private DefaultTableModel modeloTabla;

    public Form_Ubicacion() {
        initComponents();
        sistemaFacade = new SistemaFacade();
        inicializarFormulario();
        txt_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtrarUbicacionesPorNombre(txt_buscar.getText());
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // Método para inicializar el formulario
    private void inicializarFormulario() {
        configurarComboEstado();
        configurarComboTipoUbicacion();
        configurarTabla();
        cargarUbicacionesEnTabla();
        setCamposHabilitados(false);
        // Los botones permanecen habilitados para permitir su uso
    }
    
    // Método para habilitar/deshabilitar campos
    private void setCamposHabilitados(boolean habilitado) {
        txtZona.setEnabled(habilitado);
        txtCapacidad.setEnabled(habilitado);
        txtDescripcion.setEnabled(habilitado);
        cmbEstado.setEnabled(habilitado);
        cmbTipoUbicacion.setEnabled(habilitado);
    }

    // Configurar el combo con las opciones correctas
    private void configurarComboEstado() {
        cmbEstado.removeAllItems();
        cmbEstado.addItem("Activo");
        cmbEstado.addItem("Inactivo");
        cmbEstado.addItem("Mantenimiento");
        cmbEstado.addItem("Disponible");
    }

    // Configurar el combo con las opciones correctas
    private void configurarComboTipoUbicacion() {
        cmbTipoUbicacion.removeAllItems();
        cmbTipoUbicacion.addItem("Estantería");
        cmbTipoUbicacion.addItem("Pallet");
        cmbTipoUbicacion.addItem("Refrigerado");
        cmbTipoUbicacion.addItem("Especial");
    }

    //  Limpiar los campos
    private void limpiarCampos() {
        txtZona.setText("");
        txtCapacidad.setText("");
        txtDescripcion.setText("");
        cmbEstado.setSelectedIndex(-1);
        cmbTipoUbicacion.setSelectedIndex(-1);
        ubicacionSeleccionada = null;
        modoEdicion = false;
    }
    
    // Configurar la tabla
    private void configurarTabla() {
        modeloTabla = new DefaultTableModel(
            new Object[][]{},
            new String[]{"ID", "Ubicación", "Tipo", "Capacidad", "Estado", "Descripción"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer la tabla no editable
            }
        };
        tbl_ubicaciones.setModel(modeloTabla);
        
        // Configurar el selector de filas
        tbl_ubicaciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        // Agregar listener para selección de fila
        tbl_ubicaciones.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                filaSeleccionada();
            }
        });
    }
    
    //  Cargar todos las ubicaciones en la tabla
    private void cargarUbicacionesEnTabla() {
        try {
            modeloTabla.setRowCount(0);
            List<UbicacionFisica> ubicaciones = sistemaFacade.listarUbicaciones();
            java.util.Collections.reverse(ubicaciones); // Mostrar recientes primero
            for (UbicacionFisica ubicacion : ubicaciones) {
                Object[] fila = {
                    ubicacion.getUbicacionId(),
                    ubicacion.getMiUbicacionFisica(),
                    ubicacion.getTipo(),
                    ubicacion.getCapacidad(),
                    ubicacion.getEstado(),
                    ubicacion.getDescripcion()
                };
                modeloTabla.addRow(fila);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar ubicaciones: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Método para manejar la selección de fila
    private void filaSeleccionada() {
        int filaSeleccionada = tbl_ubicaciones.getSelectedRow();
        if (filaSeleccionada >= 0) {
            try {
                long ubicacionId = (Long) modeloTabla.getValueAt(filaSeleccionada, 0);
                ubicacionSeleccionada = sistemaFacade.buscarUbicacionPorId(ubicacionId);
                if (ubicacionSeleccionada != null) {
                    cargarUbicacionEnCampos(ubicacionSeleccionada);
                    setCamposHabilitados(true);
                    modoEdicion = true;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar ubicación: " + e.getMessage(), 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    // Método para cargar ubicación en los campos
    private void cargarUbicacionEnCampos(UbicacionFisica ubicacion) {
        txtZona.setText(ubicacion.getMiUbicacionFisica());
        txtCapacidad.setText(ubicacion.getCapacidad() != null ? ubicacion.getCapacidad().toString() : "");
        txtDescripcion.setText(ubicacion.getDescripcion());
        
        // Seleccionar el tipo en el combo
        for (int i = 0; i < cmbTipoUbicacion.getItemCount(); i++) {
            if (cmbTipoUbicacion.getItemAt(i).equals(ubicacion.getTipo())) {
                cmbTipoUbicacion.setSelectedIndex(i);
                break;
            }
        }
        
        // Seleccionar el estado en el combo
        for (int i = 0; i < cmbEstado.getItemCount(); i++) {
            if (cmbEstado.getItemAt(i).equals(ubicacion.getEstado())) {
                cmbEstado.setSelectedIndex(i);
                break;
            }
        }
        
        // Habilitar los campos para edición
        setCamposHabilitados(true);
    }
    
    // Método para validar campos
    private boolean validarCampos() {
        if (txtZona.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "La zona es obligatoria", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if (cmbTipoUbicacion.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de ubicación", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if (cmbEstado.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un estado", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        if (!txtCapacidad.getText().trim().isEmpty()) {
            try {
                int capacidad = Integer.parseInt(txtCapacidad.getText().trim());
                if (capacidad <= 0) {
                    JOptionPane.showMessageDialog(this, "La capacidad debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "La capacidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
    
    // Método para crear objeto UbicacionFisica desde los campos
    private UbicacionFisica crearUbicacionDesdeCampos() {
        UbicacionFisica ubicacion = new UbicacionFisica();
        ubicacion.setMiUbicacionFisica(txtZona.getText().trim());
        ubicacion.setTipo(cmbTipoUbicacion.getSelectedItem().toString());
        ubicacion.setEstado(cmbEstado.getSelectedItem().toString());
        ubicacion.setDescripcion(txtDescripcion.getText().trim());
        
        if (!txtCapacidad.getText().trim().isEmpty()) {
            ubicacion.setCapacidad(Integer.parseInt(txtCapacidad.getText().trim()));
        }
        
        return ubicacion;
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_crear = new javax.swing.JButton();
        txt_buscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_ubicaciones = new javax.swing.JTable();
        btn_nuevo = new javax.swing.JButton();
        btn_guardar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        lbl_ingresarDNI = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbEstado = new javax.swing.JComboBox<>();
        cmbTipoUbicacion = new javax.swing.JComboBox<>();
        txtZona = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtCapacidad = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));

        btn_crear.setBackground(new java.awt.Color(25, 25, 25));
        btn_crear.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        btn_crear.setForeground(new java.awt.Color(255, 255, 255));
        btn_crear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Crear.png"))); // NOI18N
        btn_crear.setText("Crear");
        btn_crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_crearActionPerformed(evt);
            }
        });

        txt_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_buscarActionPerformed(evt);
            }
        });

        tbl_ubicaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_ubicaciones);

        btn_nuevo.setBackground(new java.awt.Color(25, 25, 25));
        btn_nuevo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        btn_nuevo.setForeground(new java.awt.Color(255, 255, 255));
        btn_nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Nuevo1.png"))); // NOI18N
        btn_nuevo.setText("Nuevo");
        btn_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nuevoActionPerformed(evt);
            }
        });

        btn_guardar.setBackground(new java.awt.Color(25, 25, 25));
        btn_guardar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        btn_guardar.setForeground(new java.awt.Color(255, 255, 255));
        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Guardar.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_eliminar.setBackground(new java.awt.Color(25, 25, 25));
        btn_eliminar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Eliminar.png"))); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        lbl_ingresarDNI.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        lbl_ingresarDNI.setForeground(new java.awt.Color(255, 255, 255));
        lbl_ingresarDNI.setText("Buscar ubicación:");

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Descripción:");

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Tipo de Ubicación:");

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Estado:");

        cmbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbTipoUbicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Zona");

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Pasillo");

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Estante");

        jLabel7.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Nivel");

        jLabel8.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Capacidad:");

        jLabel9.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Gestión de Ubicaciones");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btn_nuevo)
                        .addGap(55, 55, 55)
                        .addComponent(btn_guardar)
                        .addGap(55, 55, 55)
                        .addComponent(btn_eliminar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cmbTipoUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(46, 46, 46)
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_crear, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 139, Short.MAX_VALUE))))
                        .addComponent(txt_buscar)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lbl_ingresarDNI)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(jScrollPane1)))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(txtZona, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(33, 33, 33)
                .addComponent(txtCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel4)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel5)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel6)
                        .addGap(46, 46, 46)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addComponent(jLabel9)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_crear)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(txtZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2)
                                            .addComponent(cmbTipoUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel3))
                                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)))
                            .addComponent(txtCapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(lbl_ingresarDNI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_nuevo)
                    .addComponent(btn_guardar)
                    .addComponent(btn_eliminar))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_crearActionPerformed

        try {
            if (!validarCampos()) {
                return;
            }
            
            UbicacionFisica nuevaUbicacion = crearUbicacionDesdeCampos();
            sistemaFacade.crearUbicacion(nuevaUbicacion);
            
            JOptionPane.showMessageDialog(this, "Ubicación creada exitosamente", 
                                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
            limpiarCampos();
            cargarUbicacionesEnTabla();
            setCamposHabilitados(false);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al crear ubicación: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_crearActionPerformed

    private void txt_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_buscarActionPerformed

        String textoBusqueda = txt_buscar.getText().trim();
        if (textoBusqueda.isEmpty()) {
            cargarUbicacionesEnTabla();
        } else {
            try {
                modeloTabla.setRowCount(0);
                List<UbicacionFisica> ubicaciones = sistemaFacade.listarUbicaciones();
                
                for (UbicacionFisica ubicacion : ubicaciones) {
                    if (ubicacion.getMiUbicacionFisica().toLowerCase().contains(textoBusqueda.toLowerCase()) ||
                        ubicacion.getTipo().toLowerCase().contains(textoBusqueda.toLowerCase()) ||
                        ubicacion.getEstado().toLowerCase().contains(textoBusqueda.toLowerCase())) {
                        
                        Object[] fila = {
                            ubicacion.getUbicacionId(),
                            ubicacion.getMiUbicacionFisica(),
                            ubicacion.getTipo(),
                            ubicacion.getCapacidad(),
                            ubicacion.getEstado(),
                            ubicacion.getDescripcion()
                        };
                        modeloTabla.addRow(fila);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al buscar ubicaciones: " + e.getMessage(), 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txt_buscarActionPerformed

    private void btn_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nuevoActionPerformed

        limpiarCampos();
        setCamposHabilitados(true);
        modoEdicion = false;
        txtZona.requestFocus();
    }//GEN-LAST:event_btn_nuevoActionPerformed

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed

        try {
            if (ubicacionSeleccionada == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una ubicación para editar", 
                                            "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!validarCampos()) {
                return;
            }
            
            UbicacionFisica ubicacionActualizada = crearUbicacionDesdeCampos();
            ubicacionActualizada.setUbicacionId(ubicacionSeleccionada.getUbicacionId());
            
            sistemaFacade.actualizarUbicacion(ubicacionActualizada);
            
            JOptionPane.showMessageDialog(this, "Ubicación actualizada exitosamente", 
                                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
            
            limpiarCampos();
            cargarUbicacionesEnTabla();
            setCamposHabilitados(false);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al actualizar ubicación: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed

        if (ubicacionSeleccionada == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una ubicación para eliminar", 
                                        "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirmacion = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro de que desea eliminar la ubicación '" + ubicacionSeleccionada.getMiUbicacionFisica() + "'?", 
            "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        
        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                sistemaFacade.eliminarUbicacion(ubicacionSeleccionada.getUbicacionId());
                
                JOptionPane.showMessageDialog(this, "Ubicación eliminada exitosamente", 
                                            "Éxito", JOptionPane.INFORMATION_MESSAGE);
                
                limpiarCampos();
                cargarUbicacionesEnTabla();
                setCamposHabilitados(false);
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar ubicación: " + e.getMessage(), 
                                            "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_eliminarActionPerformed

    // Método para filtrar ubicaciones por nombre en tiempo real
    private void filtrarUbicacionesPorNombre(String nombre) {
        try {
            modeloTabla.setRowCount(0);
            List<UbicacionFisica> ubicaciones = sistemaFacade.listarUbicaciones();
            java.util.Collections.reverse(ubicaciones); // Mostrar recientes primero
            for (UbicacionFisica ubicacion : ubicaciones) {
                if (ubicacion.getMiUbicacionFisica().toLowerCase().contains(nombre.toLowerCase())) {
                    Object[] fila = {
                        ubicacion.getUbicacionId(),
                        ubicacion.getMiUbicacionFisica(),
                        ubicacion.getTipo(),
                        ubicacion.getCapacidad(),
                        ubicacion.getEstado(),
                        ubicacion.getDescripcion()
                    };
                    modeloTabla.addRow(fila);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al filtrar ubicaciones: " + e.getMessage(), 
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_crear;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JButton btn_nuevo;
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbTipoUbicacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_ingresarDNI;
    private javax.swing.JTable tbl_ubicaciones;
    private javax.swing.JTextField txtCapacidad;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtZona;
    private javax.swing.JTextField txt_buscar;
    // End of variables declaration//GEN-END:variables

}
